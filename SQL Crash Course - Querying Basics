###############################################################
###############################################################
SQL Crash Course - Querying Basics
###############################################################
###############################################################


###############################################################
WHERE AND ORDER BY CLAUSE
###############################################################

USE bakery;

SELECT * 
FROM bakery.customers;

SELECT * 
FROM bakery.customers
WHERE first_name = 'Frodo'; 

SELECT * FROM bakery.customers
WHERE customer_id = 100104;

SELECT * 
FROM bakery.customers
WHERE birth_date > '1995-01-01'
ORDER BY birth_date DESC; 

SELECT * 
FROM bakery.customers
WHERE birth_date > '1995-01-01'
ORDER BY total_money_spent DESC; 

SELECT * 
FROM bakery.customers
WHERE birth_date > '1995-01-01'
ORDER BY total_money_spent DESC
LIMIT 2; 


###############################################################
SELECT Statement
###############################################################

USE bakery;

SELECT *
FROM customers;

SELECT first_name, 
last_name, 
phone,
total_money_spent,
(total_money_spent + 100) * 10
FROM customers
WHERE first_name = 'Kelly';

SELECT DISTINCT(state)
FROM customers;


-- Practice Question: 
-- Using the customers table, write a query 
-- to show the phone numbers of all
-- customer who live in Texas (TX)

SELECT phone
FROM customers
WHERE state = 'TX';


###############################################################
WHERE STATEMENT
###############################################################

USE bakery;

SELECT * 
FROM customers
WHERE first_name != 'Kevin';

SELECT * 
FROM customers
WHERE first_name <> 'Kevin';

SELECT * 
FROM customers
WHERE NOT first_name = 'Kevin';

SELECT * 
FROM customers
WHERE total_money_spent > 1009;

SELECT * 
FROM customers
WHERE total_money_spent >= 1009;

SELECT * 
FROM customers
WHERE total_money_spent < 1009;

SELECT * 
FROM customers
WHERE total_money_spent <= 1009;


###############################################################
Logical operators (AND, OR, NOT)
###############################################################

SELECT * 
FROM customers
WHERE first_name != 'Kevin';

SELECT * 
FROM customers
WHERE first_name <> 'Kevin';

SELECT * 
FROM customers
WHERE NOT first_name = 'Kevin';

SELECT * 
FROM customers
WHERE total_money_spent > 1009;

SELECT * 
FROM customers
WHERE total_money_spent >= 1009;

SELECT * 
FROM customers
WHERE total_money_spent < 1009;

SELECT * 
FROM customers
WHERE total_money_spent <= 1009;

SELECT * 
FROM customers
WHERE total_money_spent <= 1009 AND state = 'TX';

SELECT * 
FROM customers
WHERE total_money_spent <= 1009 OR state = 'TX';

SELECT * 
FROM customers
WHERE (total_money_spent <= 1009) OR (state = 'TX');

SELECT * 
FROM customers
WHERE (total_money_spent <= 1009) OR (state = 'TX');

SELECT * 
FROM customers
WHERE (birth_date < '1995-01-01' OR state = 'PA') AND state = 'NY';

SELECT * 
FROM customers
WHERE (birth_date < '1995-01-01' OR state = 'PA') AND state = 'NY';

SELECT * 
FROM customers
WHERE NOT birth_date < '1995-01-01';

-- Practice Question
-- Using the employees table, write a query to show the employee ID
-- first and last name, and salary of employees that make more that 
-- 45k in the bakery department


SELECT * 
FROM employees;

SELECT employee_id,
first_name,
last_name, 
salary
FROM employees 
WHERE salary > 45000 AND department = 'bakery';


###############################################################
IN Operator
###############################################################


SELECT * 
FROM customers; 

SELECT * 
FROM customers
WHERE state IN ('PA', 'TX', 'CA');

SELECT * 
FROM customers
WHERE state = 'PA' OR state = 'TX' OR state = 'CA'; 

SELECT * 
FROM customers
WHERE first_name IN ('Kevin', 'Kelly'); 


###############################################################
Between Operator 
###############################################################

SELECT * 
FROM customers 
WHERE total_money_spent BETWEEN 534 AND 1009
ORDER BY total_money_spent;

SELECT * 
FROM customers 
WHERE total_money_spent >= 534 AND total_money_spent <= 1009
ORDER BY total_money_spent;

SELECT * 
FROM customers 
WHERE total_money_spent BETWEEN 1009 AND 534
ORDER BY total_money_spent;
-- Result in rows 

SELECT * 
FROM customers 
WHERE total_money_spent >=  1009 AND total_money_spent <= 534
ORDER BY total_money_spent;
-- Result in rows 

SELECT * 
FROM customers
WHERE birth_date BETWEEN '1990-01-01' AND '2020-01-01';

SELECT * 
FROM customers
WHERE first_name BETWEEN 'Charles' AND 'Obi';


-- Practice Question 
-- Using the products table, select the name of the 
-- product where the sale price is between $1.25 and $3

SELECT * 
FROM products
WHERE sale_price BETWEEN 1.25 AND 3; 


###############################################################
LIKE Operator
###############################################################

-- % (Represents 0, 1, or infinite)
-- _  (Represents 1) 

SELECT * 
FROM customers
WHERE first_name LIKE 'K%n';
-- K%n Starts with K and ends with n

SELECT * 
FROM customers
WHERE first_name LIKE '%n';
-- %n Ends with n

SELECT * 
FROM customers
WHERE first_name LIKE '%in';
-- %In Ends with In

SELECT * 
FROM customers
WHERE first_name LIKE '%k%';
-- %k% Can start with anything and end with anything
-- but must have the letter k somewhere in between

SELECT * 
FROM customers
WHERE first_name LIKE 'm_____';
-- m_____ Starts with m but each _ is a letter
-- must go after it

SELECT * 
FROM customers
WHERE first_name LIKE 'Do_';
-- Do_ generates Don as the _ fills for the n

SELECT * 
FROM customers
WHERE last_name Like 'S______%';

SELECT * 
FROM customers
WHERE phone Like '9%';

###############################################################
ORDER BY
###############################################################

-- Order by automatically orders rows in Ascending order
-- DESC at the end of the order by clause will order 
-- rows in descending order

SELECT *
FROM customers
ORDER BY first_name; 

SELECT *
FROM customers
ORDER BY first_name DESC; 

SELECT state, total_money_spent
FROM customers
ORDER BY state DESC, total_money_spent; 
-- You can decide whether to include DESC 
-- for each column ordered by

SELECT state, total_money_spent
FROM customers
ORDER BY state DESC, total_money_spent DESC;
-- The query will first order by state and then
-- total_money_spent second

SELECT *
FROM customers
ORDER BY 8 DESC, 9 DESC;
-- Each column in a table can be represented by a number
-- for example, the first column (customer_id) can
-- be referred to as 1 in the order by clause.
-- This is not a best practice.

SELECT customer_id, last_name, state, total_money_spent
FROM customers
ORDER BY 8 DESC, 9 DESC;
-- This query will result in an error as there are only 
-- four columns but we are using the order by for columns
-- 8 and 9.

SELECT customer_id, last_name, state, total_money_spent
FROM customers
ORDER BY state DESC, total_money_spent DESC
-- This query will work





