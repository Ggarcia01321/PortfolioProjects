###############################################################
###############################################################
SQL Crash Course - GROUP BY
###############################################################
###############################################################


###############################################################
Using GROUP BY 
###############################################################

-- Used in conjunction with aggregate functions 
-- MIN, MAX, AVG, COUNT, SUM, which allow you form calculations 


SELECT customer_id
FROM customer_orders
GROUP BY customer_id; 


SELECT customer_id, SUM(tip)
FROM customer_orders
GROUP BY customer_id; 


SELECT customer_id, 
COUNT(tip) AS count_tips,
 SUM(tip)  AS total_tip
FROM customer_orders
GROUP BY customer_id
ORDER BY total_tip DESC; 


-- Practice Question 
-- Using the employees table, write a query to show the average 
-- salary for each department 


SELECT *
FROM employees; 


SELECT department, ROUND(AVG(salary), 2) AS average_salary
FROM employees
GROUP BY department;


###############################################################
Aggregate Functions 
###############################################################

SELECT customer_id, SUM(order_total)
FROM customer_orders
GROUP BY customer_id; 
-- SUM aggregate function is an addition of a column combined 


SELECT customer_id, AVG(order_total)
FROM customer_orders
GROUP BY customer_id; 
-- Average aggregate function 


SELECT customer_id, MAX(order_total)
FROM customer_orders
GROUP BY customer_id; 
-- MAX aggregate function generates Max value for that specific customer
-- ID


SELECT customer_id, MIN(order_total)
FROM customer_orders
GROUP BY customer_id; 
-- MIN aggregate function generates minimum value for 
-- that specific customer ID


SELECT customer_id, COUNT(order_total)
FROM customer_orders
GROUP BY customer_id; 
-- Counts the number of orders for each customer_id


SELECT first_name, COUNT(phone)
FROM customers
GROUP BY first_name;
-- Counts the number of records in the phone column for each first_name


SELECT product_id, COUNT(tip), COUNT(DISTINCT tip)
FROM customer_orders
GROUP BY product_id;
-- COUNT(tip) will consider each time a tip was received based on 
-- proudct_id.
-- COUNT(DISTINCT tip) will consider how many times the tip given was unique


-- Practice Question
-- Using the employee table, write a query to show the average salary 
-- and the max salary in each department

SELECT department, AVG(salary), MAX(salary)
FROM employees
GROUP BY department; 


###############################################################
HAVING VS. WHERE 
###############################################################


SELECT customer_id, SUM(tip) AS total_tips
FROM customer_orders
WHERE customer_id <> 100101
GROUP BY customer_id;
-- Where Clause will pertain to the column not aggregated 
-- EXAMPLE: customer_id
-- Having Clause will work with the columns with aggregate functions
-- EXAMPLE: SUM(tip)


SELECT customer_id, SUM(tip) AS total_tips
FROM customer_orders
GROUP BY customer_id
HAVING SUM(tip) > 5;


-- Practice Question 
-- Using the customer orders table, write a query to show the 
-- products that had 2 or more order 


SELECT *
FROM customer_orders; 


SELECT product_id, COUNT(order_id) as Orders
FROM customer_orders
GROUP BY product_id
HAVING COUNT(product_id) >= 2; 





